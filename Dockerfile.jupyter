# To build a container, you will use the docker build command
# https://docs.docker.com/engine/reference/commandline/build/
#
#   docker build -t ift6758/serving:test_tag -f Dockerfile.serving .
#   docker build -t ift6758/jupyter:test_jupyter -f Dockerfile.jupyter .
#


# https://docs.docker.com/engine/reference/builder/#from
# You shouldn't need to change this
FROM python:3.7

# https://docs.docker.com/engine/reference/builder/#workdir
# Create and cd into /code as your working directory
WORKDIR /code


# The main docker commands you will find useful:
# 
# Add a file or directory
# https://docs.docker.com/engine/reference/builder/#add
#
#       ADD ./<SOURCE_DIR/FILE> ./<DOCKER_DIR/FILE>
#
# Run a shell command (tip: chain shell commands with && rather than multiple RUN commands)
# https://docs.docker.com/engine/reference/builder/#run
#
#       RUN <SHELL COMMAND>   
#
# Set an environment variable:
# https://docs.docker.com/engine/reference/builder/#env
#
#       ENV <ENV_VAR>=<DEFAULT>
#
# Expose a port
# https://docs.docker.com/engine/reference/builder/#port
#
#       EXPOSE <PORT>
#
# Provide default command for executing container
# https://docs.docker.com/engine/reference/builder/#cmd
#
#       CMD <SHELL COMMAND>



# TODO: add code, optionally a default model if you want 
# COPY ift6758/ift6758/client/jupyter_dashboard.ipynb /code/ift6758/ift6758/client/jupyter_dashboard.ipynb
COPY ift6758/ift6758/client /code/ift6758/ift6758/client
# CD /code

# TODO: install libs
COPY ift6758/requirements.txt .
RUN pip install -r requirements.txt

# TODO: expose ports (or do this in docker-compose)
# EXPOSE 8889

# TODO: specify default command - this is not required because you can always specify the command
# either with the docker run command or in the docker-compose file
ENTRYPOINT ["jupyter", "lab", "--port=8890", "--ip=0.0.0.0", "--allow-root"]
# CMD ['jupyter-lab', '--port=8888', '--no-browser', '--ip=0.0.0.0', '--allow-root']


# reference:
# https://www.ctl.io/developers/blog/post/dockerfile-entrypoint-vs-cmd/
# https://u.group/thinking/how-to-put-jupyter-notebooks-in-a-dockerfile/
# https://stackoverflow.com/questions/49024624/how-to-dockerize-jupyter-lab
# what is sha256? https://www.n-able.com/blog/sha-256-encryption


# Note:
# in app.py log:
# serving_1  |  * Serving Flask app 'app' (lazy loading)
# 
# serving_1  |  * Environment: production
# 
# serving_1  |    WARNING: This is a development server. Do not use it in a production deployment.
# 
# serving_1  |    Use a production WSGI server instead.
# 
# serving_1  |  * Debug mode: on
# 
# serving_1  |  * Running on all addresses.
# 
# serving_1  |    WARNING: This is a development server. Do not use it in a production deployment.
# 
# serving_1  |  * Running on http://172.23.0.2:5000/ (Press CTRL+C to quit) <----- ip: 172.23.0.2, so 'sc=ServingClient(ip='172.23.0.2')'
# 
# serving_1  |  * Restarting with stat
# 
# serving_1  |  * Debugger is active!
# 
# serving_1  |  * Debugger PIN: 442-944-611
